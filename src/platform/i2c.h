/**
 * This file is part of the Titan Flight Computer Project
 * Copyright (c) 2024 UW SARP
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 * @file common/platform/i2c.h
 * @authors Joshua Beard
 * @brief Driver for the I2C
 */

#pragma once
#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>
#include <string.h>

#include "tal/mask.h"
#include "gpio.h"

#if defined(__cplusplus)
  extern "C" {
#endif

volatile int32_t* I2C_1_Base = 0x40005400;

// I2C_CR1 offset = 0
uint32_t I2C_CR2_OFFSET     = 0x1;
uint32_t I2C_TIMINGR_OFFSET = 0x4;
uint32_t I2C_ISR_OFFSET     = 0x6;
uint32_t I2C_RXDR_OFFSET    = 0x9;
uint32_t I2C_TXDR_OFFSET    = 0xA;


void tal_enable_I2C();

void tal_transmit(uint8_t addr, void* data, uint32_t size);

void* tal_read(uint8_t addr, uint32_t size);



void tal_enable_I2C()
{ 

    tal_set_mode(133, 2); // alternate function mode
    tal_set_mode(134, 2);

    tal_set_drain(133, 1); // set open drain
    tal_set_drain(134, 1);

    tal_set_speed(133, 2); // set high speed, maybe needs to be 3 for very high speed
    tal_set_speed(134, 2);

    tal_pull_pin(133, 1); // set pull up
    tal_pull_pin(134, 1);

    tal_alternate_mode(133, 4); // set alternate mode to I2C
    tal_alternate_mode(134, 4);
    
    tal_write_mask_u32(0, I2C_1_Base, 0, 1); // clear PE bit
    
    // for now disable digital and analog noise filters, we can chose to have these later
    tal_write_mask_u32(0, I2C_1_Base, 8, 4);
    tal_write_mask_u32(0, I2C_1_Base, 12, 1);

    int32_t timing = 0x00707CBB; // generated by STMCube, subject to change
    tal_write_mask_u32(timing, I2C_1_Base + I2C_TIMINGR_OFFSET, 0, 32);

    tal_write_mask_u32(1, I2C_1_Base, 0, 1); // set PE bit to 1 enabling I2C
}


void tal_transmit(uint8_t addr, void* d, uint32_t size)
{
    tal_transmit_r(addr, d, size, true);
}


static void tal_transmit_r(uint8_t addr, void* d, uint32_t size, bool first_call)
{
    if(size <= 0){ // no data left to send
        return;
    }

    uint8_t* data = (uint8_t*)d;

    int data_size; // size of data to be sent on this call, either size or 255

    if(size <= 255){
        tal_write_mask_u32(size, I2C_1_Base + I2C_CR2_OFFSET, 16, 8); // NBYTES
        data_size = size;
    }else{
        tal_write_mask_u32(255, I2C_1_Base + I2C_CR2_OFFSET, 16, 8); // NBYTES
        tal_write_mask_u32(1, I2C_1_Base + I2C_CR2_OFFSET, 24, 1); // reload = 1
        data_size = 255;
    }

    if(first_call){
        // set addr mode, default 7 bit, so do nothing
        tal_write_mask_u32(addr, I2C_1_Base + I2C_CR2_OFFSET, 1, 7); // set address of chip
        tal_write_mask_u32(0, I2C_1_Base + I2C_CR2_OFFSET, 10, 1); // write 0 because transmit (yes, seems backwards)
        tal_write_mask_u32(1, I2C_1_Base + I2C_CR2_OFFSET, 25, 1); // autoend 

        tal_write_mask_u32(1, I2C_1_Base + I2C_CR2_OFFSET, 13, 1); // Send start condition
    }

    uint32_t timeout = 100000; // TODO tune parameter to "work" in testing

    while(data_size > 0){
        uint32_t count = 0;
        while(tal_read_mask_u32(I2C_1_Base + I2C_ISR_OFFSET, 1, 1) != 1 && 
        count++ < timeout); // wait until TXIS is set
        
        tal_write_mask_u32(data, I2C_1_Base + I2C_TXDR_OFFSET, 0, 8);
        
        data++;
        data_size--; // sent one byte
        size--; // keep track of size
    }

    
    tal_transmit_r(addr, data, size, false); // call again, with updated (less) data to send
}

void* tal_read(uint8_t addr, uint32_t size)
{
    uint8_t data_array[size]; // TODO: check
    return tal_read_r(addr, size, true, data_array, 0);
}

static void* tal_read_r(uint8_t addr, uint32_t size, bool first_call, uint8_t* data, uint32_t i)
{
    if(size <= 0){ // no data left to read
        return data;
    }

    int data_size; // size of data to be read on this call, either size or 255

    if(size <= 255){
        tal_write_mask_u32(size, I2C_1_Base + I2C_CR2_OFFSET, 16, 8); // NBYTES
        data_size = size;
    }else{
        tal_write_mask_u32(255, I2C_1_Base + I2C_CR2_OFFSET, 16, 8); // NBYTES
        tal_write_mask_u32(1, I2C_1_Base + I2C_CR2_OFFSET, 24, 1); // reload = 1
        data_size = 255;
    }

    if(first_call){
        // set addr mode, default 7 bit, so do nothing
        tal_write_mask_u32(addr, I2C_1_Base + I2C_CR2_OFFSET, 1, 7); // set address of chip
        tal_write_mask_u32(1, I2C_1_Base + I2C_CR2_OFFSET, 10, 1); // write 1 because read (yes, seems backwards)
        tal_write_mask_u32(1, I2C_1_Base + I2C_CR2_OFFSET, 25, 1); // autoend 

        tal_write_mask_u32(1, I2C_1_Base + I2C_CR2_OFFSET, 13, 1); // Send start condition
    }

    uint32_t timeout = 100000; // TODO: tune parameter to "work" in testing

    while(data_size > 0){
        uint32_t count = 0;
        while(tal_read_mask_u32(I2C_1_Base + I2C_ISR_OFFSET, 2, 1) != 1 && 
        count++ < timeout); // wait until RXNE is set
        
        uint8_t d = tal_read_mask_u8(I2C_1_Base + I2C_RXDR_OFFSET, 0, 8);
        data[i] = d;

        i++;
        data_size--; // recieved one byte
        size--; // keep track of size
    }

    
    return tal_read_r(addr, size, false, data, i); // call again, with updated (less) data to send
}



#if defined(__cplusplus)
  }
#endif